<?php

// 1) Для всех заданий с массивами задан многомерный массив, элементы которого могут содержать одинаковые id:

//$array = [
//    [id => 1, date => "12.01.2020", name => "test1" ...],
//  [id => 2, date => "02.05.2020", name => "test2" ...],
//  [id => 4, date => "08.03.2020", name => "test4" ...],
//  [id => 1, date => "22.01.2020", name => "test1" ...]
//  [id => 2, date => "11.11.2020", name => "test4" ...],
//  [id => 3, date => "06.06.2020", name => "test3" ...],
//]

//Все решения постараться реализовать НЕ используя циклы for / foreach.
//выделить уникальные записи (убрать дубли) в отдельный массив. в конечном массиве не должно быть элементов с одинаковым id.
//На выходе:
//
//$array = [
//    [id => 1, ...],
//    [id => 2, ...],
//    [id => 4, ...],
//    [id => 3, ...],
//]

// 2) отсортировать многомерный массив по ключу (любому)

// 3)вернуть из массива только элементы, удовлетворяющие внешним условиям (например элементы с определенным id)

// 4)изменить в массиве значения и ключи (использовать name => id в качестве пары ключ => значение)

//На выходе:

//$array = [
//    "test1" => 1,
//    "test2" => 2,
//    "test4" => 4,
//    "test3" => 3
//];

$array = [
    ['id' => 1, 'date' => "12.01.2020", 'name' => "test1"],
    ['id' => 2, 'date' => "02.05.2020", 'name' => "test2"],
    ['id' => 4, 'date' => "08.03.2020", 'name' => "test4"],
    ['id' => 1, 'date' => "22.01.2020", 'name' => "test1"],
    ['id' => 2, 'date' => "11.11.2020", 'name' => "test4"],
    ['id' => 3, 'date' => "06.06.2020", 'name' => "test3"],
];


//---------------------------------1----------------------------//
$indices = array_keys(array_unique(array_map(function ($arr) {
    return $arr['id'];
}, $array)));// получаем индексы неповторяющихся элементов массива

$resultArr = array_filter(array_map(function ($index) use ($array) {// получаем уникальные записи
    if (isset($array[$index])) {
        return $array[$index];
    }
}, $indices, $array),function ($elem) {
    if (!is_null($elem)) {
        return $elem;
    };
});

//--------------------------------2----------------------------//

function cmp($a, $b)// функцию сортировщик по полю name или id
{
    if ($a['name'] == $b['name']) {// если элементы с ключем id или name одинаковые, то пропуск
        return 0;
    }
    return ($a['name'] > $b['name']) ? 1 : -1;
}

//function cmp($a, $b)// функция-сортировщик по дате
//{
//    if (strtotime($a['date']) == strtotime($b['date'])) {// если элементы с ключем id или name одинаковые, то пропуск
//        return 0;
//    }
//    return (strtotime($a['date']) < strtotime($b['date'])) ? -1 : 1;
//}

usort($resultArr, "cmp");// сортируем массив

//-------------------------------3---------------------------//

$filterArr = array_filter($resultArr, function ($elem) {
    if (isset($elem['id'])) {// если поле id у массива не задано, то он не попадает в результирующий
        return $elem;
    }
});

//-------------------------------4----------------------------//

$keys = array_map(function ($arr) {// получаем поле name исходного массива
    return $arr['name'];
}, $filterArr);

$values = array_map(function ($arr) { // получаем поле id исходного массива
    return $arr['id'];
}, $filterArr);

$resultArr = array_combine($keys, $values);// соединяем их вместе
